// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render HomePage component properly at detail 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HomePage
    location={
      Object {
        "pathname": "/0",
      }
    }
    scrollTo={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
          Array [
            "0",
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(RestaurantsList) />,
        <WelcomeMessage
          show={true}
        />,
        <TransitionGroup
          childFactory={[Function]}
          component="div"
        >
          <CSSTransition
            classNames="slide"
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <div
              className="slide"
            >
              <Switch
                location={
                  Object {
                    "pathname": "/0",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>
          </CSSTransition>
        </TransitionGroup>,
      ],
      "className": "page-content",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "show": true,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "childFactory": [Function],
          "children": <CSSTransition
            classNames="slide"
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <div
              className="slide"
            >
              <Switch
                location={
                  Object {
                    "pathname": "/0",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>
          </CSSTransition>,
          "component": "div",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": "/0",
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="slide"
            >
              <Switch
                location={
                  Object {
                    "pathname": "/0",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>,
            "classNames": "slide",
            "mountOnEnter": true,
            "timeout": 250,
            "unmountOnExit": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Switch
                location={
                  Object {
                    "pathname": "/0",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>,
              "className": "slide",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />,
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />,
                ],
                "location": Object {
                  "pathname": "/0",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "exact": true,
                    "path": "/map",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "exact": true,
                    "path": "/:id",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(RestaurantsList) />,
          <WelcomeMessage
            show={true}
          />,
          <TransitionGroup
            childFactory={[Function]}
            component="div"
          >
            <CSSTransition
              classNames="slide"
              mountOnEnter={true}
              timeout={250}
              unmountOnExit={true}
            >
              <div
                className="slide"
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/0",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>
            </CSSTransition>
          </TransitionGroup>,
        ],
        "className": "page-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "show": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "childFactory": [Function],
            "children": <CSSTransition
              classNames="slide"
              mountOnEnter={true}
              timeout={250}
              unmountOnExit={true}
            >
              <div
                className="slide"
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/0",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>
            </CSSTransition>,
            "component": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": "/0",
            "nodeType": "class",
            "props": Object {
              "children": <div
                className="slide"
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/0",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>,
              "classNames": "slide",
              "mountOnEnter": true,
              "timeout": 250,
              "unmountOnExit": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Switch
                  location={
                    Object {
                      "pathname": "/0",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>,
                "className": "slide",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/map"
                    />,
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/:id"
                    />,
                  ],
                  "location": Object {
                    "pathname": "/0",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "exact": true,
                      "path": "/map",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "exact": true,
                      "path": "/:id",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`should render HomePage component properly at root 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HomePage
    location={
      Object {
        "pathname": "/",
      }
    }
    scrollTo={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(RestaurantsList) />,
        <WelcomeMessage
          show={true}
        />,
        <TransitionGroup
          childFactory={[Function]}
          component="div"
        >
          <CSSTransition
            classNames="slide"
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <div
              className=""
            >
              <Switch
                location={
                  Object {
                    "pathname": "/",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>
          </CSSTransition>
        </TransitionGroup>,
      ],
      "className": "page-content",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "show": true,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "childFactory": [Function],
          "children": <CSSTransition
            classNames="slide"
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <div
              className=""
            >
              <Switch
                location={
                  Object {
                    "pathname": "/",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>
          </CSSTransition>,
          "component": "div",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": "/",
          "nodeType": "class",
          "props": Object {
            "children": <div
              className=""
            >
              <Switch
                location={
                  Object {
                    "pathname": "/",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>
            </div>,
            "classNames": "slide",
            "mountOnEnter": true,
            "timeout": 250,
            "unmountOnExit": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Switch
                location={
                  Object {
                    "pathname": "/",
                  }
                }
              >
                <Route
                  component={[Function]}
                  exact={true}
                  path="/map"
                />
                <Route
                  component={[Function]}
                  exact={true}
                  path="/:id"
                />
              </Switch>,
              "className": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />,
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />,
                ],
                "location": Object {
                  "pathname": "/",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "exact": true,
                    "path": "/map",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "exact": true,
                    "path": "/:id",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(RestaurantsList) />,
          <WelcomeMessage
            show={true}
          />,
          <TransitionGroup
            childFactory={[Function]}
            component="div"
          >
            <CSSTransition
              classNames="slide"
              mountOnEnter={true}
              timeout={250}
              unmountOnExit={true}
            >
              <div
                className=""
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>
            </CSSTransition>
          </TransitionGroup>,
        ],
        "className": "page-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "show": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "childFactory": [Function],
            "children": <CSSTransition
              classNames="slide"
              mountOnEnter={true}
              timeout={250}
              unmountOnExit={true}
            >
              <div
                className=""
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>
            </CSSTransition>,
            "component": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": "/",
            "nodeType": "class",
            "props": Object {
              "children": <div
                className=""
              >
                <Switch
                  location={
                    Object {
                      "pathname": "/",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>
              </div>,
              "classNames": "slide",
              "mountOnEnter": true,
              "timeout": 250,
              "unmountOnExit": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Switch
                  location={
                    Object {
                      "pathname": "/",
                    }
                  }
                >
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/map"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    path="/:id"
                  />
                </Switch>,
                "className": "",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/map"
                    />,
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/:id"
                    />,
                  ],
                  "location": Object {
                    "pathname": "/",
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "exact": true,
                      "path": "/map",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "exact": true,
                      "path": "/:id",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": "div",
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
